# 正则表达式（re）
- 是一个计算机科学的概念
- 用于使用单个字符串来描述，匹配符合某个规则的字符串
- 常常用来检索，替换某些模式的文本

# 正则的写法
- .（点号）：表示任意一个字符，出了\n， 比如查找所有的一个字符 \.
- []： 匹配中括号中列举的任意字符，比如：[L,Y,0]
- \d：任意一个数字
- \D：除了数字都可以
- \s：表示空格，tab键
- \S：除了空白符号
- \w：单词字符，就是a-z，A-Z,0-9,_
- \W：除了上面\w
- *：表示前面字符重复零次或者多次， \w*
- +：表示前面内容至少出现一次
- ？：前面才出现的内容零次或者一次
- {m,n}:允许前面内容出现最少m次，最多n次
- ^: 匹配字符串的开始
- $:匹配字符串的结尾
- \b: 匹配单词的边界
- ():对正则表达式内容进行分组，从第一个括号开始，编号逐渐增大
     验证一个数字：^\d$
     必须有一个数字，最少一位：^\d+$
     只能出现数字，且位数为5-10位：^\d{5,10}$
     注册者输入年龄，要求16岁以上，99岁一下：^[16-99]$
     只能输入英文字符和数字： ^[A-Za-z0-9]$
     验证QQ号码： [0-9]{5,12}

- \A: 只匹配字符串开头， \Aabcd,则abcd
- \Z: 仅匹配字符串结尾， abcd\Z
- |:左右任意一个
- (?P<name>...): 分组，除了原来的编号再指定一个别名，(?P<id>12345){2}
- (?P=name): 引用分组

# RE使用大致步骤
1. 使用compile将要表示正则的字符串编译成一个pattern对象
2. 通过pattern对象提供一系列方法对文本进行查找匹配，获得匹配结果，一个March对象
3. 最后使用Match对象提供的属性和方法获得信息，根据需求进行操作

# Re常用函数
- Group():获得一个或者多个分组匹配的字符串，当获得整个匹配字符串的时候，直接使用group或者group(0)
- start: 获取分组匹配的字串再整个字符串中的起始位置，参数默认为0
- end: 获取分组匹配字符串的字串再整个字符串中的结束位置，默认参数为0
- span: 返回的结构技术(satrt(group),end(group))
